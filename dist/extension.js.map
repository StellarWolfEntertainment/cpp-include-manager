{"version":3,"file":"extension.js","mappings":"swBAAA,kBACA,YACA,WAcA,SAASA,EAAQC,GAEf,IAAIC,EAAYC,EAAOD,UAAUE,iBAE7BC,EAAO,GAEX,GAAgB,MAAbH,EACH,CACE,IAAII,EAAQJ,EAAU,GAEV,MAATI,IAEDD,EAAOC,EAAMC,IAAIC,OAErB,CACA,OAAOC,EAAKC,KAAKL,EAAMJ,EACzB,CAEA,MAAMU,EAAYX,EArBI,wBAsBhBY,EAAaZ,EArBI,0BAuBvB,SAASa,IAEP,IACIC,EADSX,EAAOD,UAAUa,iBAAiB,uBACNC,IAAI,gBAAkB,8BAE/DC,EAAGC,SAASP,EAAW,QAAQ,CAACQ,EAAKC,KAChCD,GAEDhB,EAAOkB,OAAOC,uBAAuB,6BAErC,MAAMC,EAAwBC,KAAKC,MAAML,GAEnCM,EAAe,IAChBH,EAAU,0BAA0BI,KAAIC,GAAOd,EAAoBe,QAAQ,SAAUD,QACrFL,EAAU,uBAGfN,EAAGC,SAASN,EAAY,QAAQ,CAACO,EAAKW,KACpC,GAAIX,EAEF,YADAhB,EAAOkB,OAAOC,uBAAuB,+BAIvC,IAAIS,EAA2BP,KAAKC,MAAMK,GAC1CC,EAAW,6BAA+BL,EAC1C,MAAMM,EAAcR,KAAKS,UAAUF,EAAY,KAAM,GAErDd,EAAGiB,UAAUtB,EAAYoB,GAAcb,IACjCA,GACFhB,EAAOkB,OAAOC,uBAAuB,8BACvC,GACA,GACF,GAER,CAGA,oBAAyBa,GACThC,EAAOD,UAAUkC,wBAAwBzB,GAC/C0B,YAAYxB,GACpBA,GACF,EAGA,wBAA8B,C,UCjF9ByB,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,K,SCAzBF,EAAOC,QAAUC,QAAQ,O,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://cpp-include-manager/./src/extension.ts","webpack://cpp-include-manager/external commonjs \"vscode\"","webpack://cpp-include-manager/external node-commonjs \"fs\"","webpack://cpp-include-manager/external node-commonjs \"path\"","webpack://cpp-include-manager/webpack/bootstrap","webpack://cpp-include-manager/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\ninterface IncManJson {\n  'standardized-libraries': string[];\n  'explicit-libraries': string[];\n}\n\ninterface SettingsJson {\n  [key: string]: any;\n}\n\nconst inputFilePath = '/.vscode/incMan.json';\nconst outputFilePath = '/.vscode/settings.json';\n\nfunction getPath(filePath : string) : string\n{\n  let workspace = vscode.workspace.workspaceFolders;\n\n  let root = \"\";\n  \n  if(workspace != null)\n  {\n    let space = workspace[0];\n\n    if(space != null)\n    {\n      root = space.uri.fsPath;\n    }\n  }\n  return path.join(root, filePath);\n}\n\nconst inputPath = getPath(inputFilePath);\nconst outputPath = getPath(outputFilePath);\n\nfunction handleFileChange()\n{  \n  let config = vscode.workspace.getConfiguration('cpp-include-manager');\n  let libraryPathTemplate: string = config.get('libraryPath') ?? \"C:/Libraries/${lib}/include\";\n\n  fs.readFile(inputPath, 'utf8', (err, inputData) => {\n    if(err)\n    {\n      vscode.window.showInformationMessage('Error reading IncMan.json');\n    }\n      const inputJson: IncManJson = JSON.parse(inputData);\n\n      const includePaths = [\n        ...inputJson['standardized-libraries'].map(lib => libraryPathTemplate.replace('${lib}', lib)),\n        ...inputJson['explicit-libraries']\n      ];\n\n      fs.readFile(outputPath, 'utf8', (err, outputData) => {\n        if (err) {\n          vscode.window.showInformationMessage('Error reading settings.json');\n          return;  // Exit early on error\n        }\n        \n        let outputJson: SettingsJson = JSON.parse(outputData);\n        outputJson[\"C_Cpp.default.includePath\"] = includePaths;\n        const updatedData = JSON.stringify(outputJson, null, 2);\n\n        fs.writeFile(outputPath, updatedData, (err) => {\n          if (err) {\n            vscode.window.showInformationMessage('Error writing settings.json');\n          }\n        });\n      });\n  });\n}\n\n\nexport function activate(context: vscode.ExtensionContext) {\n  let watcher = vscode.workspace.createFileSystemWatcher(inputPath);\n  watcher.onDidChange(handleFileChange);\n  handleFileChange();\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(112);\n"],"names":["getPath","filePath","workspace","vscode","workspaceFolders","root","space","uri","fsPath","path","join","inputPath","outputPath","handleFileChange","libraryPathTemplate","getConfiguration","get","fs","readFile","err","inputData","window","showInformationMessage","inputJson","JSON","parse","includePaths","map","lib","replace","outputData","outputJson","updatedData","stringify","writeFile","context","createFileSystemWatcher","onDidChange","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}